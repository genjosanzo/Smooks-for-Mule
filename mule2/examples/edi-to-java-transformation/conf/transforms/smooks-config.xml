<?xml version="1.0"?>
<smooks-resource-list xmlns="http://www.milyn.org/xsd/smooks-1.1.xsd"
		xmlns:edi="http://www.milyn.org/xsd/smooks/edi-1.1.xsd"
		xmlns:jb="http://www.milyn.org/xsd/smooks/javabean-1.1.xsd">

    <!--
    Configure the EDI Parser to parse the message stream into a stream of SAX events.
    -->
    <edi:reader mappingModel="/transforms/edi-to-xml-order-mapping.xml" />

    <!--
    Create an "example.beans.Order" bean instance when we visit the start of the <order> element.
    Assign the new bean instance to the beanId of "order".
    Target the to be created Header bean under the beanId "header".
    As soon as this bean is created it will be set on this bean instance.
    Target the to be created ArrayList instance under the beanId "orderItems".
    As soon as this list is created it will be set on this bean instance.
    -->
    <jb:bindings beanId="order" createOnElement="order" class="example.edi_to_java_transformation.model.Order">
		<jb:wiring property="header" beanIdRef="header"/>
		<jb:wiring property="orderItems" beanIdRef="orderItems"/>
	</jb:bindings>

    <!--
    Create an "example.beans.Header" bean instance when we visit the start of the <order> element.
    Note, we're creating this bean instance before we encounter the actual <header> element.
    This bean is set on the on the previous declared Order bean as soon as it is created, because
    it is target by that bean via a bean wiring.
    Target the to be created Customer instance under the beanId "customer".
    As soon as this bean is created it will be set on this bean instance.
    -->
    <jb:bindings beanId="header" createOnElement="order" class="example.edi_to_java_transformation.model.Header">
		<jb:wiring property="customer" beanIdRef="customer"/>

		<jb:value property="orderId" data="header/order-id" />
		<jb:value property="orderStatus" data="header/status-code" decoder="Long"/>
		<jb:value property="netAmount" data="header/net-amount" decoder="BigDecimal"/>
		<jb:value property="totalAmount" data="header/total-amount" decoder="BigDecimal" />
		<jb:value property="tax" data="header/tax" decoder="BigDecimal"/>
		<jb:value property="date" data="header/date" decoder="Date" >

			<!-- Configuration for the date decoder -->
			<jb:decodeParam name="format">EEE MMM dd HH:mm:ss z yyyy</jb:decodeParam>
        	<jb:decodeParam name="locale-language">en</jb:decodeParam>
        	<jb:decodeParam name="locale-country">IE</jb:decodeParam>
		</jb:value>
	</jb:bindings>


    <!--
    Create an "example.beans.Customer" bean instance when we visit the start of the
    <customer-details> element.
	This bean is set on the on the previous declared Header bean as soon as it is created, because
    it is target by that bean via a bean wiring.
    -->
    <jb:bindings beanId="customer" createOnElement="customer-details" class="example.edi_to_java_transformation.model.Customer">
		<jb:value property="userName" data="customer-details/username" />
		<jb:value property="firstName" data="customer-details/name/firstname"/>
		<jb:value property="lastName" data="customer-details/name/lastname"/>
		<jb:value property="state" data="customer-details/state"/>
	</jb:bindings>

	<!--
	Create an ArrayList when we visit the start of the <order> element.
	This list is set on the on the previous declared Order bean as soon as it is created, because
    it is target by that bean via a bean wiring.
	Target the to be created OrderItem beans under the beanId "orderItem".
    As soon as these beans are created they will be added to this list.
	 -->
	 <jb:bindings beanId="orderItems" createOnElement="order" class="java.util.ArrayList">
		<jb:wiring beanIdRef="orderItem"/>
	</jb:bindings>

    <!--
    Create an "example.beans.OrderItem" bean instance when we visit the start of the <order-item> element.
    This bean is add to the on the previous declared ArrayList as soon as it is created, because
    it is target by that ArrayList via a bean wiring.
    -->
    <jb:bindings beanId="orderItem" createOnElement="order-item" class="example.edi_to_java_transformation.model.OrderItem">
		<jb:value property="quantity" data="order-item/quantity" decoder="Integer"/>
		<jb:value property="productId" data="order-item/product-id"/>
		<jb:value property="price" data="order-item/price" decoder="BigDecimal"/>
		<jb:value property="title" data="order-item/title"/>
	</jb:bindings>

</smooks-resource-list>
